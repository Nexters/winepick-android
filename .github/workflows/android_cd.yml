---
name: Android CD

# github actions 를 실행할 조건 설정
# tag 를 푸시하는 경우를 캐치하려 했으나 생각대로 되지 않아 브랜치 분기조건도 추가함
on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - 'develop'
      - 'master'
      - '*/cd*'
    tags:
      - '*'

# 실행할 job 설정
jobs:
  # CD 작업
  test-deploy:
    runs-on: ubuntu-16.04
    steps:
      # 데이터 로깅 작업 : 작업을 위한 로깅 작업을 진행한다.
      # 로깅1. github context
      - name: 로깅1. GitHub context 확인
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        if: always()

      # 로깅2. job context
      - name: 로깅2. job context 확인
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
        if: always()

      # 로깅3. steps context
      - name: 로깅3. steps context 확인
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
        if: always()

      # 로깅4. runner context
      - name: 로깅4. runner context 확인
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
        if: always()

      # 로깅5. strategy context
      - name: 로깅5. strategy context 확인
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
        if: always()

      # 로깅6. matrix context
      - name: 로깅6. matrix context 확인
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
        if: always()

      # 로깅7. 현재 경로 확인
      - name: 로깅7. 현재 경로 확인
        run: pwd >> pwd.txt | cat pwd.txt
        if: always()


      # CD 1. 체크아웃 사용 및 JDK 1.8 설정
      - uses: actions/checkout@v1
      - name: CD 1. 체크아웃 사용 및 JDK 1.8 설정
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # CI 2-1. kakao_app_key gpg 해독
      - name: CI 2-1. Decrypt kakao_app_key
        run: gpg --quiet --batch --yes --always-trust --decrypt --passphrase="$KAKAO_APP_KEY_TAR_PWD" --output kakao_app_key.tar kakao_app_key.tar.gpg

        env:
          KAKAO_APP_KEY_TAR_PWD: ${{ secrets.KAKAO_APP_KEY_TAR_PWD }}

      # CI 2-2. kakao_app_key.tar 압축 풀기 (지정되었던 경로로 자동으로 파일이 만들어짐)
      - name: CI 2-2. kakao_app_key.tar 압축 풀기
        run: tar xvf kakao_app_key.tar

      # CI 2-3. google-service.json gpg 해독
      - name: CI 3-3. Decrypt google-service.json
        run: gpg --quiet --batch --yes --always-trust --decrypt --passphrase="$GOOGLE_JSON_KEY_TAR_PWD" --output services.tar services.tar.gpg

        env:
          GOOGLE_JSON_KEY_TAR_PWD: ${{ secrets.KAKAO_APP_KEY_TAR_PWD }}

      # CI 2-4. services.tar 압축 풀기 (지정되었던 경로로 자동으로 파일이 만들어짐)
      - name: CI 3-4. services.tar 압축 풀기
        run: tar xvf services.tar

      # CD 3. 테스트용 apk 만들기 및 슬랙 메시지 전송
      # [slack-upload-file](https://github.com/marketplace/actions/slack-upload-file)
      - run: './gradlew assembleDebug'
      - uses: MeilCli/slack-upload-file@v1
        with:
          slack_token: ${{ secrets.SLACK_READ_WRITE_TOKEN }}
          channels: ${{ secrets.SLACK_CHANNEL_DEPLOY }}
          file_path: 'app/build/outputs/apk/debug/app-debug.apk'
          file_name: 'app-debug.apk'
          file_type: 'apk'
          initial_comment: '${{ github.ref }} 테스트 앱 슬랙 배포 성공'

      # CD 4. 테스트용 apk artifact github actions 에 업로드
      - name: CD 4. 테스트용 apk artifact 업로드
        uses: actions/upload-artifact@v2
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # CD 5. 실패할 경우 슬랙에 실패 메시지 전송
      - name: CD 5. PR 전용 실패 메시지 전송
        uses: 8398a7/action-slack@v2.6.0
        with:
          status: custom
          payload: |
            {
              "text": ":no_entry: ${{ github.event_name }} ${{ job.status }}",
              "attachments": [{
                "title": "${{ github.workflow }}",
                "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "text": "<${{ github.event.pull_request.html_url }}|pull request link>",
                "fields": [
                  {
                    title: 'Event_name',
                    value: "${{ github.event_name }}",
                    short: true
                  },
                  {
                    title: 'Change_Logs',
                    value: "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                    short: true
                  },
                  {
                    title: 'author',
                    value: "${{ github.actor }}",
                    short: true
                  }
                ],
                "footer": "${{ github.actor }} at ${{ steps.current-time.outputs.formattedTime }}",
                "color": "danger"
              }]
            }
          author_name: ${{ github.head_ref }} Build & Test ${{ job.status }}
          icon_url: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        # secret 설정 (참고 link : https://codeac.tistory.com/112)
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_ANDROID_CD_WEBHOOK }}
        if: failure()

#      # TEST. 슬랙 메시지 전송 테스트
#      # [slack-upload-file](https://github.com/marketplace/actions/slack-upload-file)
#      - run: 'pwd >> message.txt'
#      - uses: MeilCli/slack-upload-file@v1
#        with:
#          slack_token: ${{ secrets.SLACK_READ_WRITE_TOKEN }}
#          channels: ${{ secrets.SLACK_CHANNEL_DEPLOY }}
#          file_path: 'message.txt'
#          file_name: 'message.txt'
#          file_type: 'text'
#          initial_comment: 'post by slack-upload-file'
